<?php

namespace App\Security\Voter;

use App\Entity\Disc;
use App\Entity\Utilisateur;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Bundle\SecurityBundle\Security;
use Symfony\Component\Security\Core\User\UserInterface;

// use Symfony\Component\Security\Core\Security;

class DiscVoter extends Voter {

    const EDIT = 'DISC_EDIT';
    const DELETE = 'DISC_DELETE';

    private $security;

    public function __construct(Security $security){

        $this->security = $security;
    }
    // public function __construct(
    //     private Security $security,
    // ) {
    // }

    protected function supports(string $attribute, mixed $disc): bool{

        if(!in_array($attribute, [self::EDIT, self::DELETE])){
        return false;
        }
        if(!$disc instanceof Disc){
            return false;
        }
        return true;
    }

    protected function voteOnAttribute($attribute, mixed $disc, TokenInterface $token): bool
    {
        // Récupérer l'utilisateur pour mettre en place les permissions
        $user = $token->getUser();

        // if (!$user instanceof Utilisateur) {
            if (!$user instanceof UserInterface) {
            // the user must be logged in; if not, deny access
            return false;
        }
        // ROLE_ADMIN can do anything! The power!
        if ($this->security->isGranted('ROLE_ADMIN')) {
            return true;

            // je vérifie les permissions
            switch($attribute){
                case self::EDIT:
                    return $this->canEdit();
                    break;
                
                case self::DELETE:
                    return $this->canDelete();
                        break;
            }
        }
    }

        private function canEdit(){
            return $this->security->isGranted('ROLE_ADMIN');
        }
        private function canDelete(){
            return $this->security->isGranted('ROLE_ADMIN');
        }

    }